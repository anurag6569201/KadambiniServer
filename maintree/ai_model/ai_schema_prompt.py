# --- Helper function to get Pydantic schema as string for the prompt ---
def get_schema_prompt_string():
    return f"""
    You MUST strictly output a single JSON object. Do NOT include any markdown like ```json or ```.
    The JSON object must conform to the following structure.

    Regarding "id" fields:
    - For each object in the "members" array (e.g., `members[0].id`), you MUST provide a unique temporary string placeholder (e.g., "temp_member_001", "person_alpha"). This placeholder will be used to link relationships.
    - In the "relationships" array, the "from" and "to" fields MUST refer to these temporary string placeholders you assigned to the members.
    - For ALL OTHER "id" fields (e.g., `members[0].conditions[0].id`, `relationships[0].id`, `members[0].sources[0].id`, etc.), you should OMIT the "id" field entirely or set its value to `null`. These IDs will be automatically generated by the system later.

    Structure:
    {{
      "members": [
        {{
          "id": "string (Unique temporary placeholder, e.g., 'temp_member_1')",
          "firstName": "string",
          "lastName": "string",
          "maidenName": "string (optional)",
          "birthDate": "string (YYYY-MM-DD format, optional)",
          "deathDate": "string (YYYY-MM-DD format, optional)",
          "causeOfDeath": "string (optional)",
          "gender": "string ('male', 'female', 'other', or 'unknown')",
          "photoUrl": "string (URL format, optional)",
          "birthPlace": "string (optional)",
          "deathPlace": "string (optional)",
          "occupation": "string (optional)",
          "bio": "string (optional)",
          "isPrivate": "boolean (optional, defaults to false)",
          "conditions": [
            {{
              // "id" field OMITTED or null here
              "name": "string (e.g., 'Malaria', 'Viral Fever', 'Leg Injury from Accident')",
              "diagnosisDate": "string (YYYY-MM-DD format, optional)",
              "notes": "string (optional, e.g., 'Surgery of legs')"
            }}
          ],
          "allergies": [
            // Example: {{ "name": "Peanuts", "severity": "severe" }} // "id" field OMITTED or null
          ],
          "medications": [
            // Example: {{ "name": "Aspirin", "dosage": "100mg", "isCurrent": true }} // "id" field OMITTED or null
          ],
          "lifestyle": {{
            "smoking": "string ('never', 'former', 'current', or 'unknown')",
            "dietNotes": "string (optional)",
            "exerciseNotes": "string (optional)"
          }},
          "vitals": [
            // Example: {{ "type": "Blood Pressure", "value": "120/80", "date": "YYYY-MM-DD"}} // "id" field OMITTED or null
          ],
          "customTimelineEvents": [
            // Example: {{ "date": "YYYY-MM-DD", "description": "Graduated University", "title": "Graduation" }} // "id" field OMITTED or null
          ],
          "sources": [
            // Example: {{ "title": "Birth Certificate", "url": "http://example.com/cert.pdf", "text": "Official birth record.", "appliesToField": "birthDate" }} // "id" field OMITTED or null
          ],
          "generation": "integer (optional, e.g., 1 for Anurag, 0 for parents if Anurag is root)"
        }}
      ],
      "relationships": [
        {{
          // "id" field OMITTED or null here
          "from": "string (Must match a temporary placeholder 'id' from a member)",
          "to": "string (Must match a temporary placeholder 'id' from a member)",
          "type": "string ('parent', 'spouse', 'child', etc.)",
          "startDate": "string (YYYY-MM-DD format, optional)",
          "endDate": "string (YYYY-MM-DD format, optional)",
          "details": "string (optional)"
        }}
      ],
      "theme": "string ('light' or 'dark', defaults to 'light')"
    }}

    Ensure all specified fields are present in each object (unless explicitly stated they can be omitted like certain 'id' fields), using null for optional fields if no information is available, or empty lists for list fields.
    Infer dates as best as possible. For example, "June 2024" could be "2024-06-01" if a specific day isn't mentioned.
    For relationships, consistently use the 'parent' type where the 'from' member is the parent and 'to' member is the child.
    Pay close attention to field names, for example, use "appliesToField" in "sources", not "field".
    """
